// browser support
    $support-ie6: false;
    $support-ie7: true;
    $support-ie8: true;
    $support-ie9: true;
$support-mozilla: true;
$support-webkit : true;
$support-opera  : true;

// clearfix
@mixin clearfix() {
  @if $support-ie6 or $support-ie7 {
    *zoom: 1;
  }
  &:after {
    content: ".";
    display: block;
    clear: both;
    height: 0;
    visibility: hidden;
  }
}

// btn-color
@mixin btn-color($color, $darken: 10%) {
  background: $color;
  &:hover {
    background: darken($color, $darken);
  }
}

// opacity
@mixin opacity($opacity: 100) {
  -moz-opacity: $opacity / 100;
       opacity: $opacity / 100;
}

// selection
@mixin selection($r, $g, $b) {
          ::selection {background: rgb($r, $g, $b);}
     ::-moz-selection {background: rgb($r, $g, $b);}
       img::selection {background: transparent;}
  img::-moz-selection {background: transparent;}
}

// placeholder
@mixin placeholder($color: $input-color-placeholder) {
  :-moz-placeholder            { color: $color; } // Firefox 4-18
  ::-moz-placeholder           { color: $color; } // Firefox 19+
  :-ms-input-placeholder       { color: $color; } // Internet Explorer 10+
  ::-webkit-input-placeholder  { color: $color; padding: 2px; } // Safari and Chrome
}

// box-sizing
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
     -moz-box-sizing: $box-model;
          box-sizing: $box-model;
}

// vertical-align
@mixin vertical-align {
           position: relative;
                top: 50%;
  -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
          transform: translateY(-50%);
}

// gradient
@mixin gradient($startColor: #555, $endColor: #333) {
    @include filter-gradient($startColor, $endColor);
    @include background-image(linear-gradient($startColor, $endColor));
}

// Colors
$black-10: darken(#fff, 10%);
$black-20: darken(#fff, 20%);
$black-30: darken(#fff, 30%);
$black-40: darken(#fff, 40%);
$black-50: darken(#fff, 50%);
$black-60: darken(#fff, 60%);
$black-70: darken(#fff, 70%);
$black-80: darken(#fff, 80%);
$black-90: darken(#fff, 90%);

// border
@mixin border-top-radius($radius) {
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
}
@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
  border-top: 1px solid $top-color;
  border-right: 1px solid $right-color;
  border-bottom: 1px solid $bottom-color;
  border-left: 1px solid $left-color;
}

// Retina
@mixin image-retina-image($image) {
  background-image: image-url($image);

  // If we have a retina image then add styles for it too
  @if file_exists(retina_filename($image)) {
    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   -moz-min-device-pixel-ratio: 2),
    only screen and (    -ms-min-device-pixel-ratio: 2),
    only screen and (     -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (                min-resolution: 192dpi),
    only screen and (                min-resolution: 2dppx) {
      @include background-size(image-width($image) auto);
      background-image: image-url(retina_filename($image));
    }
  }
}

// transition
@mixin transition($transition: all linear .2s) {
  -moz-transition: $transition;
  transition: $transition;
}

// blur
@mixin blur($radius) {
  -webkit-filter: blur($radius);
  -moz-filter: blur($radius);
  -ms-filter: blur($radius);
  filter: blur($radius);
}

// arrow
@mixin arrow-top($color: #fff, $size: 5px, $left: 5px) {
  &:after {
    bottom: 100%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-bottom-color: $color;
    border-width: $size;
    left: $left;
  }
}
@mixin arrow-bottom($color: #fff, $size: 5px, $left: 5px) {
  &:after {
    top: 100%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-top-color: $color;
    border-width: $size;
    left: $left;
  }
}
@mixin arrow-left($color: #fff, $size: 5px, $top: 5px) {
  &:after {
    right: 100%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-right-color: $color;
    border-width: $size;
    top: $top;
  }
}
@mixin arrow-right($color: #fff, $size: 5px, $top: 5px) {
  &:after {
    left: 100%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-left-color: $color;
    border-width: $size;
    top: $top;
  }
}

@mixin close($r: 0, $g: 0, $b: 0) {
  padding: 4px 6px;
  line-height: 1;
  font-size: 18px;
  cursor: pointer;
  color: rgba($r, $g, $b, 1);
  text-decoration: none;
  @include opacity(50);
  &:before {
    content: '\00D7';
  }
  &:hover {
    @include opacity(100);
  }
}

// Grid
@mixin block($num) {
  width: (($gridWidth - ($gridGutterWidth * $num)) / $num / ($gridWidth / 100)) * 1%;
}

@mixin column($num) {
  width: (($gridWidth - ($gridGutterWidth * ($num - 1))) / $num / ($gridWidth / 100)) * 1%;
}

@mixin columns($factor, $num) {
  width: ((($gridWidth - ($gridGutterWidth * ($num - 1))) / $num / ($gridWidth / 100)) * $factor) + (($gridGutterWidth / ($gridWidth / 100)) * ($factor - 1)) * 1%;
}

@mixin column-push($num) {
  left: ((($gridWidth - ($gridGutterWidth * ($num - 1))) / $num / ($gridWidth / 100)) + $gridGutterWidth/($gridWidth/100)) * 1%;
}

@mixin columns-push($factor, $num) {
  left: (((($gridWidth - ($gridGutterWidth * ($num - 1))) / $num / ($gridWidth / 100)) * $factor) + (($gridGutterWidth / ($gridWidth / 100)) * ($factor - 1)) + $gridGutterWidth/($gridWidth/100)) * 1%;
}